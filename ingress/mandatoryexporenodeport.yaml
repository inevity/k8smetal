---

apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: default-http-backend
  labels:
    app: default-http-backend
  namespace: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        # Any image is permissible as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.4
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---

apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
  namespace: ingress-nginx
  labels:
    app: default-http-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: default-http-backend
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app: ingress-nginx
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx
data:
  53: "default/ddns2:53"
  533: "default/ddns2:533"
---

#kind: ConfigMap
#apiVersion: v1
#metadata:
#  name: udp-services-nodeport
#  namespace: ingress-nginx
#data:
#  # no conig found 
#  # 53: "default/ddns:30557"
#  #533: "default/ddns:30622"
#  #53: "default/ddns:53"
#  #533: "default/ddns:533"
#---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
        - events
    verbs:
        - create
        - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      #- "ingress-controller-leader-nginx"
      - "ingress-controller-leader-httpingress"
      #httpingress for normalupd 
      - "ingress-controller-leader-udpingress"
      - "ingress-controller-leader-udpingressnodeport"
     # - "ingress-controller-leader-nginx"
      #udpingress for udpbindproxy 
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller-udpbind
  namespace: ingress-nginx 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-nginx
  template:
    metadata:
      labels:
        app: ingress-nginx
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller-udpbind
          image: cs9.dnion.com:5000/udpingress:dev
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-udpbind
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --ingress-class=udpingress
                # securityContext:
                #   capabilities:
                #       drop:
                #       - ALL
                #       add:
                #       - NET_BIND_SERVICE
                #       - NET_ADMIN
                #       - NET_RAW
                #   # www-data -> 33
                #   # root-> 0
                #   runAsUser: 0
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: basesvcm
            containerPort: 53
            protocol: UDP
          - name: backupsvcm
            protocol: UDP
            containerPort: 533
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /etc/nginx/template
              name: nginx-template-volume
              readOnly: true
      volumes:
        - name: nginx-template-volume
          configMap:
            #name: udpnginxtemplateconfig
            # if we have create configmap,we need not items below.
            name: nginx-template
            items:
            - key: nginx.tmpl
              path: nginx.tmpl
---


#apiVersion: extensions/v1beta1
#kind: Deployment
#metadata:
#  name: nginx-ingress-controller-udpbindnodeport
#  namespace: ingress-nginx 
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: ingress-nginx-nodeport
#  template:
#    metadata:
#      labels:
#        app: ingress-nginx-nodeport
#      annotations:
#        prometheus.io/port: '10254'
#        prometheus.io/scrape: 'true'
#    spec:
#      serviceAccountName: nginx-ingress-serviceaccount
#      containers:
#        - name: nginx-ingress-controller-udpbind
#          image: cs9.dnion.com:5000/udpingress:dev
#          args:
#            - /nginx-ingress-controller
#            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
#            - --configmap=$(POD_NAMESPACE)/nginx-configuration
#            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
#            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services-nodeport
#            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-udpbind
#            - --annotations-prefix=nginx.ingress.kubernetes.io
#            - --ingress-class=udpingressnodeport
#                # securityContext:
#                #   capabilities:
#                #       drop:
#                #       - ALL
#                #       add:
#                #       - NET_BIND_SERVICE
#                #       - NET_ADMIN
#                #       - NET_RAW
#                #   # www-data -> 33
#                #   # root-> 0
#                #   runAsUser: 0
#          env:
#            - name: POD_NAME
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.name
#            - name: POD_NAMESPACE
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.namespace
#          ports:
#          - name: basesvcm
#            containerPort: 53
#            protocol: UDP
#          - name: backupsvcm
#            protocol: UDP
#            containerPort: 533
#          livenessProbe:
#            failureThreshold: 3
#            httpGet:
#              path: /healthz
#              port: 10254
#              scheme: HTTP
#            initialDelaySeconds: 10
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#          readinessProbe:
#            failureThreshold: 3
#            httpGet:
#              path: /healthz
#              port: 10254
#              scheme: HTTP
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#          volumeMounts:
#            - mountPath: /etc/nginx/template
#              name: nginx-template-volume
#              readOnly: true
#      volumes:
#        - name: nginx-template-volume
#          configMap:
#            #name: udpnginxtemplateconfig
#            # if we have create configmap,we need not items below.
#            name: nginx-template
#            items:
#            - key: nginx.tmpl
#              path: nginx.tmpl
#---
#

apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-udpbind
  namespace: ingress-nginx
spec:
  type: NodePort
  ports:
  - name: basesvcm
    port: 53
    protocol: UDP
    targetPort: 53
  - name: backupsvcm
    port: 533
    protocol: UDP
    targetPort: 533
  selector:
    app: ingress-nginx
---

#
#apiVersion: v1
#kind: Service
#metadata:
#  name: ingress-nginx-udpbindnodeport
#  namespace: ingress-nginx
#spec:
#  type: NodePort
#  ports:
#  - name: basesvcm
#    port: 53
#    protocol: UDP
#    targetPort: 53
#  - name: backupsvcm
#    port: 533
#    protocol: UDP
#    targetPort: 533
#  selector:
#    app: ingress-nginx-nodeport
